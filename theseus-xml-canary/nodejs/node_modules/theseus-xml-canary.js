const synthetics = require('Synthetics');
const log = require('SyntheticsLogger');
const syntheticsConfiguration = synthetics.getConfiguration();
const theseus_xml_checker = require('theseus-xml-checker');
const AWS = require("aws-sdk")
var cloudwatch = new AWS.CloudWatch();

async function publishMetric(rxStatus) {

    var params = {
        MetricData: [ 
          {
            MetricName: 'Theseus-Rx-Status',
            Dimensions: [{Name: 'rxid', Value: rxStatus.rxid}],
            Values: [(rxStatus.present ? 1: 0)]
          }
        ],
        Namespace: 'Theseus' 
      };
      await new Promise((resolve, reject) => {
        cloudwatch.putMetricData(params, function(err, data) {
            if (err) {
                console.log(err, err.stack); // an error occurred
                reject(err);
            }
            else {
                console.log("putMetricData successful: returned %s", data);           // successful response
                resolve();
            }    
        })
    })
};

const theseusXmlCanary = async function () {

    syntheticsConfiguration.setConfig({
        restrictedHeaders: [], // Value of these headers will be redacted from logs and reports
        restrictedUrlParameters: [] // Values of these url parameters will be redacted from logs and reports
    });

    // Handle validation for positive scenario
    const validateSuccessful = async function(res) {
        expectedRxList = process.env.EXPECTED_RX_LIST;
        return new Promise((resolve, reject) => {
            if (res.statusCode < 200 || res.statusCode > 299) {
                throw new Error(res.statusCode + ' ' + res.statusMessage);
            }

            let responseBody = '';
            res.on('data', (d) => {
                responseBody += d;
            });

            res.on('end', async () => {
                var rxStatus;
                
                try {
                    rxStatus = await theseus_xml_checker.checkXML(responseBody, expectedRxList);
                } catch(err)  {
                    console.log("caught ", err, " about to reject");
                    reject(err);
                    return;
                }

                try {
                    await Promise.all(rxStatus.map(async (status) => {await publishMetric(status)}))
                } catch(err) {
                    console.log("Caught ", err, "about to reject");
                    reject(err);
                    return;
                }

                if (!rxStatus.every(status => status.present))
                {
                    reject(new Error("Missing receivers!"));
                    return;
                }
    
                resolve(true);

            })

        })
    }
                   

    // Set request option for Verify eu-west-2.console.aws.amazon.com
    let requestOptionsStep1 = {
        hostname: 'home.theseus.bbctest01.uk',
        method: 'GET',
        path: '/rsci/receivers.xml',
        port: '443',
        protocol: 'https:',
        body: "",
        auth: 'drm:es201980',
        headers: {'User-Agent': ''}
    };
    requestOptionsStep1['headers']['User-Agent'] = [synthetics.getCanaryUserAgentString(), requestOptionsStep1['headers']['User-Agent']].join(' ');

    // Set step config option for Verify theseus.bbctest01.uk
   let stepConfig1 = {
        includeRequestHeaders: true,
        includeResponseHeaders: true,
        includeRequestBody: true,
        includeResponseBody: true,
        continueOnHttpStepFailure: true
    };

    await synthetics.executeHttpStep('Verify home.theseus.bbctest01.uk/rsci/receivers.xml', requestOptionsStep1, validateSuccessful, stepConfig1);

    return true;

};

exports.handler = async () => {
    try {
        return await theseusXmlCanary();
    } catch (error) 
    {
        console.log("Error: ", error)
        return false;
    }

};

